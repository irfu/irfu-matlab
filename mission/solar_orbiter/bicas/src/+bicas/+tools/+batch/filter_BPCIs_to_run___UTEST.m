%
% matlab.unittest automatic test code for
% bicas.tools.batch.filter_BPCIs_to_run().
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef filter_BPCIs_to_run___UTEST < matlab.unittest.TestCase



  %##############
  %##############
  % TEST METHODS
  %##############
  %##############
  methods(Test)



    function test0(testCase)

      function test(BpciArray, doNotNeedToGenerateFilenamesCa, ExpBpciArray)
        % CALL TESTED FUNCTION
        ActBpciArray = bicas.tools.batch.filter_BPCIs_to_run(...
          BpciArray, doNotNeedToGenerateFilenamesCa);

        testCase.assertEqual(...
          ActBpciArray, ...
          ExpBpciArray)
      end

      % ==================================================================

      ZERO_BPCI = bicas.tools.batch.BicasProcessingCallInfo.empty(0, 1);

      test(ZERO_BPCI, {}, ZERO_BPCI);

      INPUT_FILE_1   = 'input_dataset_1.cdf';
      OUTPUT_FILE_1  = 'output_dataset_1.cdf';

      INPUT_FILE_2   = 'input_dataset_2.cdf';
      OUTPUT_FILE_2a = 'output_dataset_2a.cdf';
      OUTPUT_FILE_2b = 'output_dataset_2b.cdf';

      BPCI_1 = bicas.tools.batch.BicasProcessingCallInfo(...
        'CLI_SWM_1', ...
        bicas.tools.batch.BpciInput(...
        'cli_input',  'DSI_1', INPUT_FILE_1), ...
        bicas.tools.batch.BpciOutput(...
        'cli_output', 'DSI_2', OUTPUT_FILE_1));

      BPCI_2 = bicas.tools.batch.BicasProcessingCallInfo(...
        'CLI_SWM_2', ...
        bicas.tools.batch.BpciInput(...
        'cli_input',  'DSI_1', INPUT_FILE_2), ...
        [...
        bicas.tools.batch.BpciOutput(...
        'cli_output', 'DSI_2', OUTPUT_FILE_2a); ...
        bicas.tools.batch.BpciOutput(...
        'cli_output', 'DSI_3', OUTPUT_FILE_2b) ...
        ]...
        );

      %==================
      % No matching file
      %==================
      if 1
        test(...
          BPCI_1, ...
          {}, ...
          BPCI_1)
        test(...
          [BPCI_1; BPCI_2], ...
          {}, ...
          [BPCI_1; BPCI_2])
        test(...
          BPCI_1, ...
          {INPUT_FILE_1}, ...   % Not matching
          BPCI_1)
        test(...
          [BPCI_1; BPCI_2], ...
          {INPUT_FILE_2}, ...   % Not matching
          [BPCI_1; BPCI_2])
      end

      %==========
      % One BPCI
      %==========
      test(...
        BPCI_1, ...
        {OUTPUT_FILE_1}, ...
        ZERO_BPCI)
      test(...
        BPCI_2, ...
        {OUTPUT_FILE_2a}, ...
        BPCI_2)
      test(...
        BPCI_2, ...
        {OUTPUT_FILE_2b}, ...
        BPCI_2)
      test(...
        BPCI_2, ...
        {OUTPUT_FILE_2b, OUTPUT_FILE_2a}, ...
        ZERO_BPCI)

      %===========
      % Two BPCIs
      %===========
      test(...
        [BPCI_1; BPCI_2], ...
        {}, ...
        [BPCI_1; BPCI_2])
      test(...
        [BPCI_1; BPCI_2], ...
        {OUTPUT_FILE_2b, OUTPUT_FILE_2a}, ...
        BPCI_1)
      test(...
        [BPCI_1; BPCI_2], ...
        {OUTPUT_FILE_1}, ...
        BPCI_2)
      test(...
        [BPCI_1; BPCI_2], ...
        {OUTPUT_FILE_1, OUTPUT_FILE_2b, OUTPUT_FILE_2a}, ...
        ZERO_BPCI)

      test(...
        [BPCI_1; BPCI_2], ...
        {OUTPUT_FILE_1, OUTPUT_FILE_2a}, ...
        [BPCI_2])
    end



  end    % methods(Test)



end
