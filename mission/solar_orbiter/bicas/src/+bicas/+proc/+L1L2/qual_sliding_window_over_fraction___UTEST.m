%
% matlab.unittest automatic test code for function
% bicas.proc.L1L2.qual.sliding_window_over_fraction().
%
% This code is also an experiment in spliting up a large test functions into
% many smaller ones.
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef qual_sliding_window_over_fraction___UTEST < matlab.unittest.TestCase



  %#####################
  %#####################
  % CONSTANT PROPERTIES
  %#####################
  %#####################
  properties(Constant)
    % Whether to also test calling the tested function with the same
    % arguments modified to represent the opposite direction.
    % Useful for disabling while debugging failed tests.
    TEST_REVERSE_ORDER = true;
  end



  %##############
  %##############
  % TEST METHODS
  %##############
  %##############
  methods(Test)



    % Zero samples
    function test_zero_samples(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test( testCase, [], [], [], 0, 1 )
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test( testCase, [], [], [], 1, 1 )
    end



    % One sample
    function test_one_sample(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10], ...
        [ 0], ...
        [ 0], ...
        1, 2)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10], ...
        [ 1], ...
        [ 1], ...
        1, 2)
    end



    % Change length of window
    function test_rate_change_window_length(testCase)
      % Window that always covers 2 samples.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 0,  1,  0], ...
        [ 0,  0,  0], ...
        1, 2)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 1,  0,  0], ...
        [ 0,  0,  0], ...
        1, 2)

      % Window that always covers 1 sample.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 0,  1,  0], ...
        [ 0,  1,  0], ...
        1, 1)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 1,  0,  0], ...
        [ 1,  0,  0], ...
        1, 1)
    end



    % Change fraction required
    function test_change_fraction(testCase)
      % Window that always covers 2 samples. Threshold not reached.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 0,  1,  0], ...
        [ 0,  0,  0], ...
        0.55, 2.01)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 1,  0,  0], ...
        [ 0,  0,  0], ...
        0.55, 2)

      % Window that always covers 2 samples. Threshold reached.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 0,  1,  0], ...
        [ 1,  1,  1], ...
        0.45, 2)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10, 11, 12], ...
        [ 1,  0,  0], ...
        [ 1,  1,  0], ...
        0.45, 2)
    end



    function test_thresholds(testCase)
      % --------------------------
      % Different thresholds +-0.5
      % --------------------------
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10:22], ...
        [0 0 1 0 1 1 1 0 0 0 1 0 0], ...
        [0 1 1 1 1 1 1 1 0 1 1 1 0], ...
        0.49, 2)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10:22], ...
        [0 0 1 0 1 1 1 0 0 0 1 0 0], ...
        [0 0 0 0 1 1 1 0 0 0 0 0 0], ...
        0.51, 2)
    end



    % Data gap
    function test_data_gap(testCase)
      % 2/3 samples in window satisfies threshold.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   15 16 17 18], ...
        [ 1  1  1  1    1  0  0  0], ...
        [ 1  1  1  1    1  0  0  0], ...
        0.66, 3)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   16 17 18], ...
        [ 1  1  1  1    0  0  0], ...
        [ 1  1  1  1    0  0  0], ...
        0.66, 3)

      % 1/3 samples in window satisfies threshold.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   15 16 17 18], ...
        [ 1  1  1  1    0  0  0  0], ...
        [ 1  1  1  1    1  0  0  0], ...
        0.33, 3)
    end



    % Varying sampling rate
    function test_varying_sampl_rate(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   15 17 19 21], ...
        [ 1  0  1  0    1  0  1  0], ...
        [ 1  1  1  1    1  0  1  0], ...
        0.5, 2)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   15 17 19 21], ...
        [ 1  0  1  0    1  0  0  0], ...
        [ 1  1  1  1    1  1  0  0], ...
        0.5, 4)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13   15 17 19 21], ...
        [ 0  0  0  0    1  0  0  0], ...
        [ 0  0  0  1    1  1  0  0], ...
        0.5, 4)

    end



    % Identical timestamps
    function test_identical_timestamps(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13 13 14 15 16], ...
        [ 0  0  1  0  0  1  0  0], ...
        [ 0  0  1  1  1  1  0  0], ...
        0.66, 3)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12 13 13 14 15 16], ...
        [ 0  0  0  1  1  0  0  0], ...
        [ 0  0  0  0  0  0  0  0], ...
        0.01, 3)
    end



    % Window length equals total time (including sample integration time)
    function test_window_length_equals_data_length(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12], ...
        [ 0  1  0], ...
        [ 1  1  1], ...
        0.33, 3)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12], ...
        [ 0  1  0], ...
        [ 0  0  0], ...
        0.34, 3)
    end



    % Window length is greater than total time (including sample integration
    % time)
    function test_window_length_gt_data_length(testCase)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12], ...
        [ 0  1  0], ...
        [ 0  0  0], ...
        0.30, 4)
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test(testCase, ...
        [10 11 12], ...
        [ 1  1  0], ...
        [ 1  1  1], ...
        0.30, 4)
    end



  end    % methods(Test)



  %########################
  %########################
  % PRIVATE STATIC METHODS
  %########################
  %########################
  methods(Static, Access=private)



    % "Raw test", without any additional functionality. Not intended to
    % be called with hardcoded arguments.
    function test_raw(...
        testCase, ...
        tt2000Ar, bFlag1Ar, expBFlagAr, flagFractionThreshold, intervalLengthSec)

      % CALL TESTED FUNCTION
      actBFlagAr = bicas.proc.L1L2.qual.sliding_window_over_fraction(...
        tt2000Ar, bFlag1Ar, flagFractionThreshold, intervalLengthSec);

      testCase.assertEqual(actBFlagAr, expBFlagAr)
    end



    % Test function intended to be called with hardcoded arguments.
    function test(...
        testCase, ...
        timeSecAr, bFlag1Ar, expBFlagAr, ...
        flagFractionThreshold, intervalLengthSec)

      assert(all(ismember(bFlag1Ar,   [0,1])))
      assert(all(ismember(expBFlagAr, [0,1])))

      % Convert arguments to simplify calls.
      % NOTE: Normalize 0x0, transpose, change types
      timeSecAr  = int64(  timeSecAr (:)) * 1e9;
      bFlag1Ar   = logical(bFlag1Ar  (:));
      expBFlagAr = logical(expBFlagAr(:));

      % Run test with arguments as they are.
      bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test_raw(...
        testCase, ...
        timeSecAr, ...
        bFlag1Ar, expBFlagAr, ...
        flagFractionThreshold, intervalLengthSec)

      % Run test with arguments modified to correspond to a reversed
      % order of samples.
      if bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.TEST_REVERSE_ORDER
        bicas.proc.L1L2.qual_sliding_window_over_fraction___UTEST.test_raw(...
          testCase, ...
          flipud(-timeSecAr), ...   % NOTE: Negation
          flipud(bFlag1Ar), flipud(expBFlagAr), ...
          flagFractionThreshold, intervalLengthSec)
      end
    end



  end    % methods(Static, Access=private)



end
