%
% matlab.unittest automatic test code for
% solo.hwzv.CURRENT_ZV_to_current_interpolate().
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef CURRENT_ZV_to_current_interpolate___UTEST < matlab.unittest.TestCase



    %##############
    %##############
    % TEST METHODS
    %##############
    %##############
    methods(Test)



        function test0(testCase)

            function test(t1_zvIBIASx1, t2_zvIBIASx2, expDuplicatesAnomaly)
                T1_CLASS_LIST = {'double', 'int64'};

                for i = 1:numel(T1_CLASS_LIST)
                    t1Class = T1_CLASS_LIST{i};

                    t1           = cast(t1_zvIBIASx1(:, 1), t1Class);
                    zvIBIASx1    = t1_zvIBIASx1(:, 2);
                    t2           = t2_zvIBIASx2(:, 1);
                    expZvIBIASx2 = t2_zvIBIASx2(:, 2);

                    % CALL TESTED FUNCTION
                    [actZvIBIASx2, actDuplicatesAnomaly] = solo.hwzv.CURRENT_ZV_to_current_interpolate(...
                        t1, zvIBIASx1, t2);
                    
                    testCase.assertEqual(actZvIBIASx2,         expZvIBIASx2);
                    testCase.assertEqual(actDuplicatesAnomaly, expDuplicatesAnomaly);
                end
            end

            % Submit data series as 2D vector.
            % Good for testing algorithm, but not input format.
            function test_exc(t1_zvIBIASx1, t2)
                t1        = t1_zvIBIASx1(:,1);
                zvIBIASx2 = t1_zvIBIASx1(:,2);

                testCase.verifyError(...
                    @() solo.hwzv.CURRENT_ZV_to_current_interpolate(t1, zvIBIASx2, t2), ...
                    ?MException)
            end

            %===================================================================

            % NOTE: Need to test interpolating on the data points (same timestamps).

            %===============================================================
            % General tests. Includes values before & after data time range.
            % No duplicate anomaly.
            %===============================================================    
            % No data, no interpolation.
            test(...
                zeros(0,2), ...
                zeros(0,2), ...
                0);    
            % No data, but request interpolation.
            test(...
                zeros(0,2), ...
                [...
                 0, NaN; ...
                10, NaN], ...
                0);
            % One real data point.
            test([...
                2,  22; ...
                ], [...
                1, NaN; ...
                2,  22; ...
                3,  22; ...
                ], ...
                0);    
            
            % One non-real data point.
            test([...
                2,  NaN; ...
                ], [...
                1, NaN; ...
                2, NaN; ...
                3, NaN; ...
                ], ...
                0);    
            % One real data point + non-data.
            test([...
                2,  22; ...
                2,  NaN; ...
                ], [...
                1, NaN; ...
                2,  22; ...
                3,  22; ...
                ], ...
                0);
            %tl = {};   % TEMP    
            test([...
                0,  11; ...
                1, NaN; ...
                2, NaN; ...
                ], [...
                -1, NaN; ...
                0,  11; ...
                1,  11; ...
                2,  11; ...
                3,  11; ...
                4,  11; ...
                5,  11; ...
                6,  11], ...
                0);

            test([...
                0,  11; ...
                1, NaN; ...
                2, NaN; ...
                3,  12; ...
                4, NaN; ...
                5, NaN ...
                ], [...
                -1, NaN; ...
                0,  11; ...
                1,  11; ...
                2,  11; ...
                3,  12; ...
                4,  12; ...
                5,  12; ...
                6,  12], ...
                0);

            % Has duplicate anomaly.
            test([...
                0,  11; ...
                0,  11; ...
                1, NaN; ...
                1, NaN; ...
                2, NaN; ...
                2, NaN; ...
                3,  12; ...
                4, NaN; ...
                5, NaN ...
                ], [ ...
                -1, NaN; ...
                0, 11; ...
                1, 11; ...
                2, 11; ...
                3, 12; ...
                4, 12; ...
                5, 12; ...
                6, 12], ...
                1);

            % Duplicate timestamps, but not duplicate bias (illegal always).
            test_exc([...
                0, 11; ...
                0, 10; ...
                1, NaN; ...
                2, NaN; ...
                3, NaN; ...
                4, 12; ...
                5, NaN], ...
                [-1:6]);

            % Sorted timestamps for the antenna, but not locally. ==> Exception (still)
            test_exc([...
                1,  11; ...
                0, NaN; ...
                2, NaN; ...
                3,  12; ...
                4, NaN; ...
                5, NaN ...
                ], ...
                [-1:6]);
        end



    end    % methods(Test)



end
