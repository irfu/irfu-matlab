%
% matlab.unittest automatic test code for
% solo.hwzv.CURRENT_ZV_to_current().
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef CURRENT_ZV_to_current___UTEST < matlab.unittest.TestCase



  %##############
  %##############
  % TEST METHODS
  %##############
  %##############
  methods(Test)



    function test0(testCase)

      function test(t1_zvIBIASx1, exp_t2_zvIBIASx2, expDuplicatesAnomaly)

        T1_CLASS_LIST = {'double', 'int64'};

        for i = 1:numel(T1_CLASS_LIST)
          t1Class = T1_CLASS_LIST{i};

          t1           = cast(    t1_zvIBIASx1(:, 1), t1Class);
          zvIBIASx1    =          t1_zvIBIASx1(:, 2);
          expT2        = cast(exp_t2_zvIBIASx2(:, 1), t1Class);
          expZvIBIASx2 =      exp_t2_zvIBIASx2(:, 2);

          % CALL TESTED FUNCTION
          [actT2, actZvIBIASx2, actDuplicatesAnomaly] = solo.hwzv.CURRENT_ZV_to_current(t1, zvIBIASx1);

          testCase.assertEqual(actT2,                expT2)
          testCase.assertEqual(actZvIBIASx2,         expZvIBIASx2)
          testCase.assertEqual(expDuplicatesAnomaly, actDuplicatesAnomaly)
        end

      end

      function test_exc(t1_zvIBIASx1)
        t1        = t1_zvIBIASx1(:,1);
        zvIBIASx1 = t1_zvIBIASx1(:,2);

        testCase.verifyError(...
          @() solo.hwzv.CURRENT_ZV_to_current(t1, zvIBIASx1), ...
          ?MException)
      end

      %===================================================================

      % No data
      test(...
        zeros(0,2), ...
        zeros(0,2), ...
        0);

      % Only real data.
      test([...
        2,  12; ...
        ], [ ...
        2, 12], ...
        0);
      test([...
        0,  10; ...
        1,  11; ...
        2,  12; ...
        ], [ ...
        0, 10; ...
        1, 11; ...
        2, 12], ...
        0);

      % Only non-real data
      test([...
        2,  NaN ...
        ],  ...
        zeros(0,2), ...
        0);
      % Only non-real data. Duplicate that is neither duplicate bias anomaly (on
      % the current antenna) nor illegal (since on other antenna).
      test([...
        2,  NaN ...
        2,  NaN ...
        ],  ...
        zeros(0,2), ...
        0);

      % Real + nonreal. No anomaly.
      test([...
        0, NaN; ...
        1,  11; ...
        2,  12; ...
        3, NaN; ...
        4   14 ...
        ], [ ...
        1, 11; ...
        2, 12; ...
        4, 14], ...
        0);

      % Real + non-real
      % Duplicate bias anomaly.
      test([...
        0, NaN; ...
        1,  11; ...
        2,  12; ...
        2,  12; ...
        2,  12; ...
        3, NaN; ...
        4,  14; ...
        4,  14; ...
        5,  15 ...
        ], [ ...
        1, 11; ...
        2, 12; ...
        4, 14; ...
        5, 15], ...
        1);

      % Illegal duplicates
      test_exc([...
        0, NaN; ...
        1,  11; ...
        2,  12; ...
        2,  12; ...
        2,  12.1; ...
        3, NaN; ...
        4,  14; ...
        4,  14; ...
        5,  15 ...
        ]);
    end



  end    % methods(Test)



end
