%
% matlab.unittest automatic test code for solo.qli.utils.
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef utils___UTEST < matlab.unittest.TestCase



  %##############
  %##############
  % TEST METHODS
  %##############
  %##############
  methods(Test)



    function test_derive_weeks(testCase)

      function test(DayBeginStrCa, firstDayOfWeek, ExpWeekBeginStrCa)
        DayBeginDtArray     = irf.dt.um(DayBeginStrCa);
        ExpWeekBeginDtArray = irf.dt.um(ExpWeekBeginStrCa);

        ActWeekBeginDtArray = solo.qli.utils.derive_weeks(DayBeginDtArray, firstDayOfWeek);

        testCase.assertEqual(ActWeekBeginDtArray, ExpWeekBeginDtArray)
      end

      SUNDAY   = 1;
      SATURDAY = 7;

      for dayOfWeek = 1:7
        test(...
          cell(0, 1), dayOfWeek, ...
          cell(0, 1))
      end

      % 2024-03-01: Fri
      %         02: Sat
      %         03: Sun
      %         04: Mon
      %         05: Tue
      %         06: Wed
      %         07: Thu
      %         08: Fri
      %         09: Sat
      test(...
        '2024-03-03', SUNDAY, ...
        '2024-03-03')
      test(...
        '2024-03-09', SUNDAY, ...
        '2024-03-03')
      test(...
        '2024-03-10', SUNDAY, ...
        '2024-03-10')

      test(...
        '2024-03-02', SATURDAY, ...
        '2024-03-02')
      test(...
        '2024-03-08', SATURDAY, ...
        '2024-03-02')
      test(...
        '2024-03-09', SATURDAY, ...
        '2024-03-09')

      % Multiple input days for same week
      % Non-incrementing order.
      % 1 week.
      test(...
        {
        '2024-03-10';
        '2024-03-09'; ...
        '2024-03-15'; ...
        }, ...
        SATURDAY, ...
        '2024-03-09')

      % Duplicate timestamps.
      % Non-incrementing order.
      % 2 weeks.
      test(...
        {
        '2024-03-08'; ...
        '2024-03-10'; ...
        '2024-03-10'; ...
        '2024-03-09'; ...
        '2024-03-15'; ...
        }, ...
        SATURDAY, ...
        {
        '2024-03-02'; ...
        '2024-03-09'; ...
        } ...
        )
    end



    % Merely test that function (1) does not crash, and (2) returns string.
    %
    % NOTE: Function returns time-dependent string.
    function test_get_data_source_info_string(testCase)

      actOutput = solo.qli.utils.get_data_source_info_string();

      testCase.verifyInstanceOf(actOutput, 'char')
      testCase.verifyTrue(isrow(actOutput))
    end



    function test_get_context_info_strings(testCase)

      % Arbitrary number of output variables.
      function test(...
          soloPosTSeries, earthPosTSeries, Tint, ...
          expSoloStr, expEarthStr)

        [actSoloStr, actEarthStr] = solo.qli.utils.get_context_info_strings(soloPosTSeries, earthPosTSeries, Tint);
        testCase.verifyEqual(actSoloStr,  expSoloStr)
        testCase.verifyEqual(actEarthStr, expEarthStr)
      end

      %===================================================================

      Units = irf_units;
      AU_KM = Units.AU / Units.km;   % Astronomical unit [km]

      ETT = EpochTT( ...
        [ ...
        '2024-01-10T00:00:00.000000000Z'; ...
        '2024-01-11T00:00:00.000000000Z'; ...
        '2024-01-12T00:00:00.000000000Z' ...
        ] ...
        );
      POSITION_TS = TSeries( ...
        ETT, ...
        [ ...
        1*AU_KM, 3, 4; ...
        2*AU_KM, 5, 6; ...
        3*AU_KM, 7, 8; ...
        ] ...
        );

      % In-range time interval.
      TI_1 = EpochTT(['2024-01-09T00:00:00.000000000Z'; '2024-03-13T00:00:00.000000000Z']);
      test(...
        POSITION_TS, POSITION_TS, TI_1, ...
        'SolO:  1.00 AU,  EcLat 229\circ,  EcLon 172\circ', ...
        'Earth:  EcLon 172\circ')

      % Out-of-range time interval.
      TI_2 = EpochTT(['2024-01-01T00:00:00.000000000Z'; '2024-01-02T00:00:00.000000000Z']);
      test(...
        POSITION_TS, POSITION_TS, TI_2, ...
        '', ...
        '')
    end



    function test_create_quicklook_filename(testCase)
      function test(Tint, expFilename)
        actFilename = solo.qli.utils.create_quicklook_filename(Tint);
        testCase.assertEqual(actFilename, expFilename)
      end

      Tint = EpochTT( ...
        [ ...
        '2024-01-10T02:09:04.900000009Z'; ...
        '2024-01-11T04:04:09.900000004Z'; ...
        ] ...
        );
      test(Tint, '20240110T02_20240111T04.png')
    end



    function test_parse_quicklook_filename(testCase)
      function test(filename, ExpStartDt1, ExpStartDt2)
        [ActStartDt1, ActStartDt2] = solo.qli.utils.parse_quicklook_filename(filename);

        testCase.assertEqual(ActStartDt1, ExpStartDt1)
        testCase.assertEqual(ActStartDt2, ExpStartDt2)
      end

      test( ...
        '20000101T00_20991231T22.png', ...
        datetime([2000,  1,  1,  0, 0, 0], 'TimeZone', 'UTCLeapSeconds'), ...
        datetime([2099, 12, 31, 22, 0, 0], 'TimeZone', 'UTCLeapSeconds'))

      % Wrong file suffix.
      test( ...
        '20000101T00_20991231T22.jpg', ...
        [], ...
        [])

      % Wrong timestamp format.
      test( ...
        '20000101T0000_20991231T2259.png', ...
        [], ...
        [])
    end



  end    % methods(Test)



end
