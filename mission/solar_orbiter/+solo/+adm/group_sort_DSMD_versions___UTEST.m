%
% matlab.unittest automatic test code for
% solo.adm.group_sort_DSMD_versions().
%
%  ~BUG: Almost does not check for multiple groups of comparable datasets.
%
%
% Author: Erik P G Johansson, IRF, Uppsala, Sweden
%
classdef group_sort_DSMD_versions___UTEST < matlab.unittest.TestCase

  %##############
  %##############
  % TEST METHODS
  %##############
  %##############
  methods(Test)



    function test0(testCase)

      function Dsmd = dsmd(path)
        assert(ischar(path))
        Dsmd = solo.adm.paths_to_DSMD_array({path});
      end

      function test(DsmdArray, mode, cdagAlgorithm, sortWrtFormerVersionsDir, expResult)
        actResult = solo.adm.group_sort_DSMD_versions(...
          DsmdArray, mode,...
          'cdagAlgorithm',            cdagAlgorithm, ...
          'sortWrtFormerVersionsDir', sortWrtFormerVersionsDir);

        testCase.assertEqual(expResult, actResult)
      end

      function test_exc(DsmdArray, mode, cdagAlgorithm, sortWrtFormerVersionsDir)
        testCase.verifyError(...
          @() solo.adm.group_sort_DSMD_versions(...
          DsmdArray, mode, ...
          'cdagAlgorithm',            cdagAlgorithm, ...
          'sortWrtFormerVersionsDir', sortWrtFormerVersionsDir), ...
          ?MException);
      end

      function testX2(DsmdArray, cdagAlgorithm, sortWrtFormerVersionsDir, expSortedDsmdArraysCa)
        % Make TWO tests: one for each mode.

        % Derive expSortedDsmdArraysCa --> expDsmdArray
        expDsmdArray = solo.adm.DSMD.empty(0,1);
        for i = 1:numel(expSortedDsmdArraysCa)
          assert(isa(expSortedDsmdArraysCa{i}, 'solo.adm.DSMD'))
          assert(isvector(expSortedDsmdArraysCa{i}))
          expDsmdArray(i, 1) = expSortedDsmdArraysCa{i}(end);
        end

        test(DsmdArray, 'latest', cdagAlgorithm, sortWrtFormerVersionsDir, expDsmdArray);
        test(DsmdArray, 'all',    cdagAlgorithm, sortWrtFormerVersionsDir, expSortedDsmdArraysCa);
      end



      DSMD_An1 = dsmd('solo_HK_rpw-bia_20200301_V01.cdf');
      DSMD_An3 = dsmd('solo_HK_rpw-bia_20200301_V03.cdf');
      DSMD_Ac2 = dsmd('solo_HK_rpw-bia-cdag_20200301_V02.cdf');
      DSMD_Ac4 = dsmd('solo_HK_rpw-bia-cdag_20200301_V04.cdf');

      % All combinations of (dir, versionNbr). Otherwise identical.
      DSMD_Bc1a = dsmd('dir/solo_L1_rpw-bia-sweep-cdag_20200307T053018-20200307T053330_V01.cdf');
      DSMD_Bc2a = dsmd('dir/solo_L1_rpw-bia-sweep-cdag_20200307T053018-20200307T053330_V02.cdf');
      DSMD_Bc1b = dsmd(    'solo_L1_rpw-bia-sweep-cdag_20200307T053018-20200307T053330_V01.cdf'); % Same filename in other dir.
      DSMD_Bc2b = dsmd(    'solo_L1_rpw-bia-sweep-cdag_20200307T053018-20200307T053330_V02.cdf'); % Same filename in other dir.

      % combinations of (CDAG, non-CDAG), (dir/ or former_versions/), (versionNbr),
      DSMD_Cnn1 = dsmd(                     'dir/solo_L1_rpw-bia-current_20200211-20200229_V01.cdf');
      DSMD_Ccn1 = dsmd(                'dir/solo_L1_rpw-bia-current-cdag_20200211-20200229_V01.cdf');
      DSMD_Cnf1 = dsmd(     'dir/former_versions/solo_L1_rpw-bia-current_20200211-20200229_V01.cdf');
      DSMD_Ccf1 = dsmd('dir/former_versions/solo_L1_rpw-bia-current-cdag_20200211-20200229_V01.cdf');
      DSMD_Cnn2 = dsmd(                     'dir/solo_L1_rpw-bia-current_20200211-20200229_V02.cdf');
      DSMD_Ccn2 = dsmd(                'dir/solo_L1_rpw-bia-current-cdag_20200211-20200229_V02.cdf');
      DSMD_Cnf2 = dsmd(     'dir/former_versions/solo_L1_rpw-bia-current_20200211-20200229_V02.cdf');
      DSMD_Ccf2 = dsmd('dir/former_versions/solo_L1_rpw-bia-current-cdag_20200211-20200229_V02.cdf');

      ALG_CN = 'CDAG then non-CDAG';
      ALG_NC = 'non-CDAG then CDAG';
      ECA = cell(0,1);
      EDSMDA = solo.adm.DSMD.empty(0,1);   % EDSMDA = Empty DSMD Array



      testX2(...
        EDSMDA, ALG_CN, 0, ...
        ECA);
      testX2(...
        DSMD_An1, ALG_CN, 0, ...
        {DSMD_An1});

      testX2(...
        [DSMD_An1, DSMD_An3], ALG_CN, 0, ...
        {[DSMD_An1, DSMD_An3]'});

      testX2(...
        [DSMD_An3, DSMD_An1], ALG_CN, 0, ...
        {[DSMD_An1, DSMD_An3]'});

      testX2(...
        [DSMD_Ac2, DSMD_An1, DSMD_An3, DSMD_Ac4], ALG_CN, 0, ...
        {[DSMD_An1, DSMD_An3, DSMD_Ac2, DSMD_Ac4]'});

      testX2(...
        [DSMD_Ac2, DSMD_An1, DSMD_An3, DSMD_Ac4], ALG_NC, 0, ...
        {[DSMD_Ac2, DSMD_Ac4, DSMD_An1, DSMD_An3]'});

      % Choose higher from lower version number from correct category.
      testX2([DSMD_Ac2, DSMD_An3], ALG_CN, 0, {[DSMD_An3, DSMD_Ac2]'});
      testX2([DSMD_Ac4, DSMD_An1], ALG_NC, 0, {[DSMD_Ac4, DSMD_An1]'});

      % Choose from missing category (CDAG, non-CDAG).
      testX2([DSMD_An1, DSMD_An3], ALG_CN, 0, {[DSMD_An1, DSMD_An3]'});
      testX2([DSMD_Ac2, DSMD_Ac4], ALG_NC, 0, {[DSMD_Ac2, DSMD_Ac4]'});

      % Two identical datasets of non-max version. ==> NON-ERROR / ERROR.
      test(    [DSMD_Bc2a, DSMD_Bc1b, DSMD_Bc1a], 'latest', ALG_CN, 0, DSMD_Bc2a);
      test_exc([DSMD_Bc2a, DSMD_Bc1b, DSMD_Bc1a], 'all',    ALG_CN, 0);

      % Two identical datasets in different locations.
      test_exc({DSMD_Bc1a, DSMD_Bc1b}, 'latest', ALG_CN, 0);
      test_exc({DSMD_Bc1a, DSMD_Bc1b}, 'all',    ALG_CN, 0);



      testX2([...
        DSMD_Cnn1, ...
        DSMD_Ccn1, ...
        DSMD_Cnf1, ...
        DSMD_Ccf1, ...
        DSMD_Cnn2, ...
        DSMD_Ccn2, ...
        DSMD_Cnf2, ...
        DSMD_Ccf2], ALG_CN, 1, ...
        {[...
        DSMD_Cnf1, ...
        DSMD_Cnn1, ...
        DSMD_Cnf2, ...
        DSMD_Cnn2, ...
        DSMD_Ccf1, ...
        DSMD_Ccn1, ...
        DSMD_Ccf2, ...
        DSMD_Ccn2]'});

      testX2([...
        DSMD_Cnn1, ...
        DSMD_Ccn1, ...
        DSMD_Cnf1, ...
        DSMD_Ccf1, ...
        DSMD_Cnn2, ...
        DSMD_Ccn2, ...
        DSMD_Cnf2, ...
        DSMD_Ccf2], ALG_NC, 1, ...
        {[...
        DSMD_Ccf1, ...
        DSMD_Ccn1, ...
        DSMD_Ccf2, ...
        DSMD_Ccn2, ...
        DSMD_Cnf1, ...
        DSMD_Cnn1, ...
        DSMD_Cnf2, ...
        DSMD_Cnn2]'});

      testX2([...
        DSMD_Ccn1, ...
        DSMD_Ccf2, ...
        DSMD_Bc1a, ...
        DSMD_Bc2a], ALG_NC, 1, ...
        {[...
        DSMD_Ccn1, ...
        DSMD_Ccf2]', [...
        DSMD_Bc1a, ...
        DSMD_Bc2a]'}');



      test_exc({...
        DSMD_Cnn1, ...
        DSMD_Ccn1, ...
        DSMD_Cnf1, ...
        DSMD_Ccf1, ...
        DSMD_Cnn2, ...
        DSMD_Ccn2, ...
        DSMD_Cnf2, ...
        DSMD_Ccf2}, 'latest', ALG_NC, 0);
    end



  end    % methods(Test)



  %########################
  %########################
  % PRIVATE STATIC METHODS
  %########################
  %########################
  methods(Static, Access=private)
  end    % methods(Static, Access=private)



end
